
R version 4.1.0 (2021-05-18) -- "Camp Pontanezen"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(here)
> library(glue)
> library(rstan)
> library(Matrix)
> source(here("analysis/utils.R"))
> 
> rstan_options(auto_write = TRUE)
> options(mc.cores = 4)
> 
> d_fname <- "sog-model-data_o-sh-go_s'21_2022-04-25.rds"
> d <- readRDS(here("data", d_fname))
> 
> ## Set up data list for Stan --------------------------------------------------#
> 
> ns = nrow(d)/2 #Number of shifts
> y <- d[,1] #Number of shots on goal by a given team in a given shift
> time = d[,2] #Shift lengths
> nt = 31 #Number of teams
> names = d@Dimnames[[2]]
> np = which(names == names[65])[2]-65 #Number of non-goalie players
> ng = ncol(d) - 2*np - 64 #Number of players
> 
> 
> #Get Stan's sparse representations of offensive team design matrix 
> dTO = d[,seq(3, 63, by=2)]
> spVecsTO = rstan::extract_sparse_parts(dTO)
> wto = spVecsTO$w
> vto = spVecsTO$v
> uto = spVecsTO$u
> nzt = length(wto)
> 
> #Get Stan's sparse representations of defensive team design matrix 
> dTD = d[,seq(4, 64, by=2)]
> spVecsTD = rstan::extract_sparse_parts(dTD)
> wtd = spVecsTD$w
> vtd = spVecsTD$v
> utd = spVecsTD$u
> 
> #Get Stan's representation of offensive player design matrix
> dPO = d[,64+1:np]
> spVecsPO = rstan::extract_sparse_parts(dPO)
> wpo = spVecsPO$w
> vpo = spVecsPO$v
> upo = spVecsPO$u
> nzpo = length(wpo)
> 
> #Get Stan's representation of defensive player design matrix (including goalies)
> dPD = d[,64+np+1:(np+ng)]
> spVecsPD = rstan::extract_sparse_parts(dPD)
> wpd = spVecsPD$w
> vpd = spVecsPD$v
> upd = spVecsPD$u
> nzpd = length(wpd)
> 
> meanint = -5 #Based on simulation
> sigmaint = 1
> sigmat <- .5
> s <-  7.5
> r <- 0.5
> 
> datalist <- list(ns=ns, y=y, time=time, nt=nt, np=np, ng=ng, wto=wto, vto=vto, 
+                  uto=uto, nzt=nzt, wtd = wtd, vtd=vtd, utd=utd, wpo=wpo, vpo=vpo,
+                  upo=upo, nzpo=nzpo, wpd=wpd, vpd=vpd, upd=upd, nzpd=nzpd, meanint=meanint,
+                  sigmaint=sigmaint, sigmat=sigmat, s=s, r=r)
> 
> 
> 
> pm_mod <- stan_model(file = here("model", "shots", "ppool.stan"))
> pm_fit <- sampling(object = pm_mod, 
+                    data = datalist)

SAMPLING FOR MODEL 'ppool' NOW (CHAIN 1).

SAMPLING FOR MODEL 'ppool' NOW (CHAIN 3).

SAMPLING FOR MODEL 'ppool' NOW (CHAIN 2).

SAMPLING FOR MODEL 'ppool' NOW (CHAIN 4).
Chain 3: 
Chain 3: Gradient evaluation took 0.8 seconds
Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 8000 seconds.
Chain 3: Adjust your expectations accordingly!
Chain 3: 
Chain 3: 
Chain 2: 
Chain 2: Gradient evaluation took 0.8 seconds
Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 8000 seconds.
Chain 2: Adjust your expectations accordingly!
Chain 2: 
Chain 2: 
Chain 1: 
Chain 1: Gradient evaluation took 1.02 seconds
Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 10200 seconds.
Chain 1: Adjust your expectations accordingly!
Chain 1: 
Chain 1: 
Chain 4: 
Chain 4: Gradient evaluation took 1.03 seconds
Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 10300 seconds.
Chain 4: Adjust your expectations accordingly!
Chain 4: 
Chain 4: 
Chain 2: Iteration:    1 / 2000 [  0%]  (Warmup)
Chain 3: Iteration:    1 / 2000 [  0%]  (Warmup)
Chain 4: Iteration:    1 / 2000 [  0%]  (Warmup)
Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup)
Chain 4: Iteration:  200 / 2000 [ 10%]  (Warmup)
Chain 3: Iteration:  200 / 2000 [ 10%]  (Warmup)
Chain 2: Iteration:  200 / 2000 [ 10%]  (Warmup)
Chain 1: Iteration:  200 / 2000 [ 10%]  (Warmup)
Chain 4: Iteration:  400 / 2000 [ 20%]  (Warmup)
Chain 3: Iteration:  400 / 2000 [ 20%]  (Warmup)
Chain 2: Iteration:  400 / 2000 [ 20%]  (Warmup)
Chain 1: Iteration:  400 / 2000 [ 20%]  (Warmup)
Chain 4: Iteration:  600 / 2000 [ 30%]  (Warmup)
Chain 3: Iteration:  600 / 2000 [ 30%]  (Warmup)
Chain 2: Iteration:  600 / 2000 [ 30%]  (Warmup)
Chain 1: Iteration:  600 / 2000 [ 30%]  (Warmup)
Chain 4: Iteration:  800 / 2000 [ 40%]  (Warmup)
Chain 1: Iteration:  800 / 2000 [ 40%]  (Warmup)
Chain 2: Iteration:  800 / 2000 [ 40%]  (Warmup)
Chain 3: Iteration:  800 / 2000 [ 40%]  (Warmup)
Chain 4: Iteration: 1000 / 2000 [ 50%]  (Warmup)
Chain 4: Iteration: 1001 / 2000 [ 50%]  (Sampling)
Chain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup)
Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling)
Chain 2: Iteration: 1000 / 2000 [ 50%]  (Warmup)
Chain 2: Iteration: 1001 / 2000 [ 50%]  (Sampling)
Chain 3: Iteration: 1000 / 2000 [ 50%]  (Warmup)
Chain 3: Iteration: 1001 / 2000 [ 50%]  (Sampling)
Chain 4: Iteration: 1200 / 2000 [ 60%]  (Sampling)
Chain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling)
Chain 2: Iteration: 1200 / 2000 [ 60%]  (Sampling)
Chain 3: Iteration: 1200 / 2000 [ 60%]  (Sampling)
Chain 4: Iteration: 1400 / 2000 [ 70%]  (Sampling)
Chain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling)
Chain 2: Iteration: 1400 / 2000 [ 70%]  (Sampling)
Chain 3: Iteration: 1400 / 2000 [ 70%]  (Sampling)
Chain 4: Iteration: 1600 / 2000 [ 80%]  (Sampling)
Chain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling)
Chain 2: Iteration: 1600 / 2000 [ 80%]  (Sampling)
Chain 3: Iteration: 1600 / 2000 [ 80%]  (Sampling)
Chain 4: Iteration: 1800 / 2000 [ 90%]  (Sampling)
Chain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling)
Chain 2: Iteration: 1800 / 2000 [ 90%]  (Sampling)
Chain 3: Iteration: 1800 / 2000 [ 90%]  (Sampling)
Chain 4: Iteration: 2000 / 2000 [100%]  (Sampling)
Chain 4: 
Chain 4:  Elapsed Time: 79879.9 seconds (Warm-up)
Chain 4:                96384.5 seconds (Sampling)
Chain 4:                176264 seconds (Total)
Chain 4: 
Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling)
Chain 1: 
Chain 1:  Elapsed Time: 86151.3 seconds (Warm-up)
Chain 1:                98021.8 seconds (Sampling)
Chain 1:                184173 seconds (Total)
Chain 1: 
Chain 2: Iteration: 2000 / 2000 [100%]  (Sampling)
Chain 2: 
Chain 2:  Elapsed Time: 88207.6 seconds (Warm-up)
Chain 2:                99366.3 seconds (Sampling)
Chain 2:                187574 seconds (Total)
Chain 2: 
Chain 3: Iteration: 2000 / 2000 [100%]  (Sampling)
Chain 3: 
Chain 3:  Elapsed Time: 93551.5 seconds (Warm-up)
Chain 3:                98355.6 seconds (Sampling)
Chain 3:                191907 seconds (Total)
Chain 3: 
> 
> seasons <- pull_seasons(d_fname)
> model_fname <- glue::glue("ppool_sh-go_{seasons}_{lubridate::today()}.rds")
> saveRDS(pm_fit, here("model", "shots", model_fname))
> 
>                  
>                  
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
